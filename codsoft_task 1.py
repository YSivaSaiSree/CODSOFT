# -*- coding: utf-8 -*-
"""Task 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1USbDOsSgeBd-OnFN_B8Y5n_UaTxFOhyf
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

"""**Load Dataset**"""

url = "/content/tested.csv"
data = pd.read_csv(url)

print(data.head())
print(data.info())

"""**Data Preprocessing**"""

data.drop(['Cabin', 'Ticket', 'Name'], axis=1, inplace=True)
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Fare'].fillna(data['Fare'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)

data = pd.get_dummies(data, columns=['Sex', 'Embarked'], drop_first=True)

X = data.drop(['Survived', 'PassengerId'], axis=1)

"""**Split the Data into Training and Testing Sets**"""

X_train, X_test, y_train, y_test = train_test_split(X, data['Survived'], test_size=0.2, random_state=42)

"""**Model**"""

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""**Evaluate the Model**"""

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

print(classification_report(y_test, y_pred))

confusion_mat = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(confusion_mat)

"""**Predictions**"""

new_passengers = pd.DataFrame({
    'Pclass': [3, 3, 2, 3, 3],
    'Age': [34.5, 47.0, 62.0, 27.0, 22.0],
    'SibSp': [0, 1, 0, 0, 1],
    'Parch': [0, 0, 0, 0, 1],
    'Fare': [7.8292, 7.0000, 9.6875, 8.6625, 12.2875],
    'Sex_male': [1, 0, 1, 1, 0],
    'Embarked_Q': [1, 0, 1, 0, 0],
    'Embarked_S': [0, 1, 0, 1, 1],  })

predictions = model.predict(new_passengers)

print("Predicted Survivals:")
print(predictions)

"""**Histogram of Predicted Survivals**"""

plt.figure()
sns.histplot(predictions, kde=False, bins=[0, 1, 2], color='skyblue')
plt.title("Predicted Survivals")
plt.xlabel("Survived (1) or Not (0)")
plt.ylabel("Count")
plt.show()

"""**Comparative Analysis - Age**"""

plt.figure()
sns.kdeplot(data[data['Survived'] == 0]['Age'], label='Not Survived', color='r')
sns.kdeplot(data[data['Survived'] == 1]['Age'], label='Survived', color='g')
plt.title("Comparative Analysis of Age")
plt.xlabel("Age")
plt.ylabel("Density")
plt.legend()
plt.show()

"""**Comparative Analysis - Fare**"""

plt.figure()
sns.kdeplot(data[data['Survived'] == 0]['Fare'], label='Not Survived', color='r')
sns.kdeplot(data[data['Survived'] == 1]['Fare'], label='Survived', color='g')
plt.title("Comparative Analysis of Fare")
plt.xlabel("Fare")
plt.ylabel("Density")
plt.legend()
plt.show()

"""**Confusion Matrix**"""

y_pred = model.predict(X_test)
actual_survival = y_test.tolist()

confusion_mat = confusion_matrix(actual_survival, y_pred)
plt.figure()
sns.heatmap(confusion_mat, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix for Testing Set")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()