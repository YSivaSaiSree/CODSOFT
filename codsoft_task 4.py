# -*- coding: utf-8 -*-
"""Task 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1THT9TsYlc5JnoEyQtz-ga0a_39MN4VF6
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

"""**Loading Dataset**"""

data = pd.read_csv("/content/car_purchasing.csv", encoding="latin1")

print(data.head())
print(data.info())

non_numeric_columns = data.select_dtypes(exclude=[np.number]).columns
data = data.drop(columns=non_numeric_columns, axis=1)

X = data.drop(columns=["car purchase amount"], axis=1)
y = data["car purchase amount"]

"""**Split the data into training and testing sets**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Standardize the features**"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""**Model**"""

model = MLPRegressor(hidden_layer_sizes=(100, 50), activation='relu', solver='adam', max_iter=1000, random_state=42)

model.fit(X_train, y_train)

"""**Evaluate the model**"""

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared (R2): {r2}')

"""**Feature Distribution Plots**"""

for feature in data.columns:
    if feature != "car purchase amount":
        plt.figure()
        sns.histplot(data[feature], kde=True)
        plt.title(f"{feature} Distribution")
        plt.show()

"""**Correlation Heatmap**"""

correlation_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

"""**Residual Plots**"""

residuals = y_test - y_pred
plt.figure()
plt.scatter(y_pred, residuals)
plt.axhline(y=0, color='r', linestyle='-')
plt.title("Residual Plot")
plt.xlabel("Predicted Values")
plt.ylabel("Residuals")
plt.show()

"""**Visualize the relationship**"""

plt.scatter(y_test, y_pred)
plt.xlabel("Actual Car Purchase Amount")
plt.ylabel ("Predicted Car Purchase Amount")
plt.title("Actual vs. Predicted Car Purchase Amounts")
plt.show()